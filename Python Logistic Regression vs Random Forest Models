import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
# Combining the training and testing data
df = pd.concat([train, test], axis=0)

# Drop rows with missing values
df = df.dropna()
# Preprocessing: Encoding categorical variables
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le
# Spliting the dataset into features (X) and target (y)
X = df[['ApplicantIncome','CoapplicantIncome']]  # All columns except Loan_Status
y = df['Loan_Status']            
# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 1. Logistic Regression Model
logreg_model = LogisticRegression(random_state=42, max_iter=1000)
logreg_model.fit(X_train, y_train)
y_pred_logreg = logreg_model.predict(X_test)

# Evaluate Logistic Regression model
accuracy_logreg = accuracy_score(y_test, y_pred_logreg)
print(f'Logistic Regression Accuracy: {accuracy_logreg:.2f}')

# 2. Random Forest Model
rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluate Random Forest model
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f'Random Forest Accuracy: {accuracy_rf:.2f}')

# Confusion Matrix for both models
conf_matrix_logreg = confusion_matrix(y_test, y_pred_logreg)
conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)

print("\nConfusion Matrix for Logistic Regression:")
print(conf_matrix_logreg)

print("\nConfusion Matrix for Random Forest:")
print(conf_matrix_rf)

# Compare Models
if accuracy_logreg > accuracy_rf:
    print("Logistic Regression performed better.")
else:
    print("Random Forest performed better.")
